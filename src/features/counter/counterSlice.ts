import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { AppThunk, RootState } from '../../app/store';
import client from '../../app/axios-base';
import { AxiosError } from 'axios';

export interface LoginResponse {
  id: number;
  name: string;
  username: string;
  token: string;
  avatar: string;
}

export interface CounterState {
  value: number;
  status: 'idle' | 'loading' | 'failed';
}

const initialState: CounterState = {
  value: 0,
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
// https://stackoverflow.com/a/62368375/14284081
// https://blog.bitsrc.io/simplifying-redux-with-redux-toolkit-6236c28cdfcb
export const incrementAsync = createAsyncThunk<number, number>(
  'counter/fetchCount',
  async (amount: number, thunkApi) => {
    //const response = await fetchCount(amount);
    //const data = await fetch('https://keyon.edu.vn/api/quizzes')
    //const length = JSON.parse(await data.text()).data.length
    // The value we return becomes the `fulfilled` action payload

    try {
      const response = await client.post<LoginResponse>('auth/login', {
        username: 'pnlinh.it@gmail.com',
        password: '12121212',
      });
      console.log(response);
    } catch (error: any | AxiosError) {
      if (!error.response) {
        throw error;
      }
      console.log(error.response.data);
    }

    return 1;

    // return client
    //   .post<LoginResponse>('auth/login', {
    //     username: '',
    //     password: ''
    //   })
    //   .then(response => response.data)
    //   .catch(error => thunkApi.rejectWithValue(error))
  },
);

// export const incrementAsync2 = (amount:number) => async (dispatch:AppDispatch)  => {
//   const data = await  fetch('https://keyon.edu.vn/api/quizzes')
//   console.table(JSON.parse(await data.text()))
//   setTimeout(() => {
//     dispatch(incrementByAmount(amount));
//   }, 3000);
// };

export const counterSlice = createSlice({
  name: 'counter',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.value += 1;
    },
    decrement: (state) => {
      state.value -= 1;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action: PayloadAction<number>) => {
      state.value += action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(incrementAsync.pending, (state, { meta }) => {
        // state[meta.arg.uid] = {loading: 'pending', 'success': false, message: undefined}
        state.status = 'loading';
      })
      .addCase(incrementAsync.fulfilled, (state, action) => {
        // state[action.meta.arg.uid] = {loading: 'done', 'success': true, message: action.payload.error.message}
        console.log(action.payload);
        state.status = 'idle';
        state.value += action.payload;
      })
      .addCase(incrementAsync.rejected, (state, action) => {
        console.log(action);
      });
  },
});

export const { increment, decrement, incrementByAmount } = counterSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCount = (state: RootState) => state.counter.value;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const incrementIfOdd =
  (amount: number): AppThunk =>
  (dispatch, getState) => {
    const currentValue = selectCount(getState());
    if (currentValue % 2 === 1) {
      dispatch(incrementByAmount(amount));
    }
  };

export default counterSlice.reducer;
